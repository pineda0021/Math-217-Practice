import streamlit as st
import numpy as np
import pandas as pd

# ------------------ Function ------------------
def least_squares_regression(x, y):
    n = len(x)
    
    # Calculate sums
    sum_x = np.sum(x)
    sum_y = np.sum(y)
    sum_x2 = np.sum(x**2)
    sum_xy = np.sum(x * y)
    
    # Calculate slope (b1) and intercept (b0)
    b1 = (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x**2)
    b0 = (sum_y - b1 * sum_x) / n
    
    # Predicted y values and residuals
    y_hat = b0 + b1 * x
    residuals = y - y_hat
    
    return b0, b1, y_hat, residuals

# ------------------ Streamlit UI ------------------
st.title("Least-Squares Regression Calculator")

st.write("You can either input your data manually or upload a CSV file with columns `x` and `y`.")

# File uploader
uploaded_file = st.file_uploader("Upload CSV", type=["csv"])

if uploaded_file is not None:
    # Read CSV
    df = pd.read_csv(uploaded_file)
    st.write("Data Preview:")
    st.dataframe(df.head())

    # Check if columns x and y exist
    if 'x' in df.columns and 'y' in df.columns:
        x = df['x'].values
        y = df['y'].values
    else:
        st.error("CSV must contain columns named 'x' and 'y'")
        st.stop()
else:
    # Manual input if no file is uploaded
    x_input = st.text_input("Explanatory variable x:", "1,2,3,4,5")
    y_input = st.text_input("Response variable y:", "2,4,5,4,5")
    
    try:
        x = np.array([float(i) for i in x_input.split(",")])
        y = np.array([float(i) for i in y_input.split(",")])
    except Exception as e:
        st.error(f"Error parsing input: {e}")
        st.stop()

# Check if x and y have the same length
if len(x) != len(y):
    st.error("x and y must have the same number of values")
else:
    # Calculate regression
    b0, b1, y_hat, residuals = least_squares_regression(x, y)
    
    # Display results
    st.subheader("Regression Results")
    st.write(f"Slope (b1): {b1}")
    st.write(f"Intercept (b0): {b0}")
    st.write(f"Regression Line: ŷ = {b1}x + {b0}")
    st.write(f"Predicted y values (ŷ): {y_hat}")
    st.write(f"Residuals (y - ŷ): {residuals}")
    
    # Plotting: scatter + regression line
    st.subheader("Regression Plot")
    import matplotlib.pyplot as plt
    
    fig, ax = plt.subplots()
    ax.scatter(x, y, color='blue', label='Actual y')
    ax.plot(x, y_hat, color='red', label='Regression Line')
    ax.set_xlabel("x")
    ax.set_ylabel("y")
    ax.legend()
    st.pyplot(fig)
